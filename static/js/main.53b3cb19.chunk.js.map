{"version":3,"sources":["components/Task.js","components/StatusLine.js","components/App.js","index.js"],"names":["Task","addTask","deleteTask","moveTask","task","useState","urgency","urgencyLevel","setUrgencyLevel","isCollapsed","collapsed","setCollapsed","formAction","setFormAction","setUrgency","event","target","attributes","value","className","onClick","newStatus","status","id","onSubmit","preventDefault","newTask","title","elements","description","type","name","placeholder","disabled","defaultValue","rows","onChange","StatusLine","taskList","tasksForStatus","tasks","addEmptyTask","filter","map","App","setTasks","lastTask","length","newTaskId","undefined","taskToAdd","filteredTasks","newTaskList","saveTasksToLocalStorage","taskId","localStorage","setItem","JSON","stringify","useEffect","loadedTasks","getItem","parse","loadTasksFromLocalStorage","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.53b3cb19.chunk.js","sourcesContent":["import { useState } from \"react\";\nimport \"../styles/task.scss\";\n\nconst Task = ({ addTask, deleteTask, moveTask, task }) => {\n    const [urgencyLevel, setUrgencyLevel] = useState(task.urgency);\n    const [collapsed, setCollapsed] = useState(task.isCollapsed);\n    const [formAction, setFormAction] = useState(\"\");\n\n    function setUrgency(event) {\n        setUrgencyLevel(event.target.attributes.urgency.value);\n    }\n\n    function handleSubmit(event) {\n        event.preventDefault();\n\n        if (formAction === \"save\") {\n            if (collapsed) {\n                setCollapsed(false);\n            } else {\n                let newTask = {\n                    id: task.id,\n                    title: event.target.elements.title.value,\n                    description: event.target.elements.description.value,\n                    urgency: urgencyLevel,\n                    status: task.status,\n                    isCollapsed: true,\n                };\n\n                addTask(newTask);\n                setCollapsed(true);\n            }\n        }\n\n        if (formAction === \"delete\") {\n            deleteTask(task.id);\n        }\n    }\n\n    function handleMoveLeft() {\n        let newStatus = \"\";\n\n        if (task.status === \"In Progress\") {\n            newStatus = \"To be Done\";\n        } else if (task.status === \"Done\") {\n            newStatus = \"In Progress\";\n        }\n\n        if (newStatus !== \"\") {\n            moveTask(task.id, newStatus);\n        }\n    }\n\n    function handleMoveRight() {\n        let newStatus = \"\";\n\n        if (task.status === \"To be Done\") {\n            newStatus = \"In Progress\";\n        } else if (task.status === \"In Progress\") {\n            newStatus = \"Done\";\n        }\n\n        if (newStatus !== \"\") {\n            moveTask(task.id, newStatus);\n        }\n    }\n\n    return (\n        <div className={`task ${collapsed ? \"collapsedTask\" : \"\"}`}>\n            <button onClick={handleMoveLeft} className=\"button moveTask\">\n                &#171;\n            </button>\n            <form\n                onSubmit={handleSubmit}\n                className={collapsed ? \"collapsed\" : \"\"}\n            >\n                <input\n                    type=\"text\"\n                    className=\"title input\"\n                    name=\"title\"\n                    placeholder=\"Enter Title\"\n                    disabled={collapsed}\n                    defaultValue={task.title}\n                />\n                <textarea\n                    rows=\"2\"\n                    className=\"description input\"\n                    name=\"description\"\n                    placeholder=\"Enter Description\"\n                    defaultValue={task.description}\n                />\n                <div className=\"urgencyLabels\">\n                    <label\n                        className={`low ${\n                            urgencyLevel === \"low\" ? \"selected\" : \"\"\n                        }`}\n                    >\n                        <input\n                            urgency=\"low\"\n                            onChange={setUrgency}\n                            type=\"radio\"\n                            name=\"urgency\"\n                        />\n                        low\n                    </label>\n                    <label\n                        className={`medium ${\n                            urgencyLevel === \"medium\" ? \"selected\" : \"\"\n                        }`}\n                    >\n                        <input\n                            urgency=\"medium\"\n                            onChange={setUrgency}\n                            type=\"radio\"\n                            name=\"urgency\"\n                        />\n                        medium\n                    </label>\n                    <label\n                        className={`high ${\n                            urgencyLevel === \"high\" ? \"selected\" : \"\"\n                        }`}\n                    >\n                        <input\n                            urgency=\"high\"\n                            onChange={setUrgency}\n                            type=\"radio\"\n                            name=\"urgency\"\n                        />\n                        high\n                    </label>\n                </div>\n                <button\n                    onClick={() => {\n                        setFormAction(\"save\");\n                    }}\n                    className=\"button\"\n                >\n                    {collapsed ? \"Edit\" : \"Save\"}\n                </button>\n                {collapsed && (\n                    <button\n                        onClick={() => {\n                            setFormAction(\"delete\");\n                        }}\n                        className=\"button delete\"\n                    >\n                        X\n                    </button>\n                )}\n            </form>\n            <button onClick={handleMoveRight} className=\"button moveTask\">\n                &#187;\n            </button>\n        </div>\n    );\n};\n\nexport default Task;\n","import \"../styles/statusLine.scss\";\nimport Task from \"./Task\";\n\nconst StatusLine = ({\n    status,\n    tasks,\n    addTask,\n    deleteTask,\n    addEmptyTask,\n    moveTask,\n}) => {\n    let taskList, tasksForStatus;\n\n    function handleAddEmpty() {\n        addEmptyTask(status);\n    }\n\n    if (tasks) {\n        tasksForStatus = tasks.filter((task) => {\n            return task.status === status;\n        });\n    }\n\n    if (tasksForStatus) {\n        taskList = tasksForStatus.map((task) => {\n            return (\n                <Task\n                    addTask={(task) => addTask(task)}\n                    deleteTask={(id) => deleteTask(id)}\n                    moveTask={(id, status) => moveTask(id, status)}\n                    key={task.id}\n                    task={task}\n                />\n            );\n        });\n    }\n\n    return (\n        <div className=\"statusLine\">\n            <h3>{status}</h3>\n            {taskList}\n            <button onClick={handleAddEmpty} className=\"button addTask\">\n                +\n            </button>\n        </div>\n    );\n};\n\nexport default StatusLine;\n","import { useState, useEffect } from \"react\";\nimport \"../styles/App.scss\";\nimport StatusLine from \"./StatusLine\";\n\nfunction App() {\n    const [tasks, setTasks] = useState([]);\n\n    useEffect(() => {\n        loadTasksFromLocalStorage();\n    }, []);\n\n    function addEmptyTask(status) {\n        const lastTask = tasks[tasks.length - 1];\n\n        let newTaskId = 1;\n\n        if (lastTask !== undefined) {\n            newTaskId = lastTask.id + 1;\n        }\n\n        setTasks((tasks) => [\n            ...tasks,\n            {\n                id: newTaskId,\n                title: \"\",\n                description: \"\",\n                urgency: \"\",\n                status: status,\n            },\n        ]);\n    }\n\n    function addTask(taskToAdd) {\n        let filteredTasks = tasks.filter((task) => {\n            return task.id !== taskToAdd.id;\n        });\n\n        let newTaskList = [...filteredTasks, taskToAdd];\n\n        setTasks(newTaskList);\n\n        saveTasksToLocalStorage(newTaskList);\n    }\n\n    function deleteTask(taskId) {\n        let filteredTasks = tasks.filter((task) => {\n            return task.id !== taskId;\n        });\n\n        setTasks(filteredTasks);\n\n        saveTasksToLocalStorage(filteredTasks);\n    }\n\n    function moveTask(id, newStatus) {\n        let task = tasks.filter((task) => {\n            return task.id === id;\n        })[0];\n\n        let filteredTasks = tasks.filter((task) => {\n            return task.id !== id;\n        });\n\n        task.status = newStatus;\n\n        let newTaskList = [...filteredTasks, task];\n\n        setTasks(newTaskList);\n\n        saveTasksToLocalStorage(newTaskList);\n    }\n\n    function saveTasksToLocalStorage(tasks) {\n        localStorage.setItem(\"tasks\", JSON.stringify(tasks));\n    }\n\n    function loadTasksFromLocalStorage() {\n        let loadedTasks = localStorage.getItem(\"tasks\");\n\n        let tasks = JSON.parse(loadedTasks);\n\n        if (tasks) {\n            setTasks(tasks);\n        }\n    }\n\n    return (\n        <div className=\"App\">\n            <h1>Task Management</h1>\n            <main>\n                <section>\n                    <StatusLine\n                        tasks={tasks}\n                        addEmptyTask={addEmptyTask}\n                        addTask={addTask}\n                        deleteTask={deleteTask}\n                        moveTask={moveTask}\n                        status=\"To be Done\"\n                    />\n                    <StatusLine\n                        tasks={tasks}\n                        addEmptyTask={addEmptyTask}\n                        addTask={addTask}\n                        deleteTask={deleteTask}\n                        moveTask={moveTask}\n                        status=\"In Progress\"\n                    />\n                    <StatusLine\n                        tasks={tasks}\n                        addEmptyTask={addEmptyTask}\n                        addTask={addTask}\n                        deleteTask={deleteTask}\n                        moveTask={moveTask}\n                        status=\"Done\"\n                    />\n                </section>\n            </main>\n        </div>\n    );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./components/App\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n"],"sourceRoot":""}